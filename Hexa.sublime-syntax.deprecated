%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - hexa
scope: source.hexa
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.hexa
      push: double_quoted_string

    - match: "'"
      scope: punctuation.definition.string.begin.hexa
      push: single_quoted_string

    - match: "`"
      scope: punctuation.definition.string.begin.hexa
      push: raw_quoted_string

    # Documentational comments begin with a '///' and finish at the end of the line
    - match: '///'
      scope: constant.other.hexa
      push: line_comment

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.hexa
      push: line_comment

    # Comments begin with a '/*' and finish at '*/'
    - include: nestable_comment

    # Regular expression
    - match: \/([0-9\w\+\-\*\'\"!№;\.,\?~`@\|_&\(\)\-#$!=%:^\[\]\t]|\\\/|\\ |\\)+\/[igy]*
      scope: keyword.control.hexa

   #- match: \/[a-zA-Z0-9\w(\\/)\+\-\*\'\"!№;\.,\?~`@(\\ )\\\|_&\(\)\-#$!=%:^\[\]\t]+\/[igy]*
    #  scope: constant.other.hexa

    # Sharp
    - match: '#[a-z]\w+\b'
      scope: storage.attribute.hexa

    # Highlight variable declarations
    #- match: \b(var|let|function)\b
    #  scope: keyword.control.hexa
    #  push: [name_after_function]

#    - match: '\b(import)\b'
#      scope: keyword.control.hexa
#      #push: from_string_error
#      push: import

    - match: '\b(from)\b'
      scope: keyword.control.hexa
      #push: from_string_error
      push: from


    # Keywords are if, else, for, while, etc.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(import|from|default|if|else|for|while|do|let|var|function|fun|in|implements|continue|break|return|try|catch|declare|class|interface|extends|static|new|throw|module|export|switch|case|private|enum|as|is|get|set|and|or|not)\b'
      scope: keyword.control.hexa

    - match: '~'
      scope: keyword.control.hexa
      push: from


    # TODO take all syntax from official JS & D (dlang looks same way)
    # TODO testing syntax file in repo
    # Operators
    - match: '[\+\-\=\|\&\<\>\*\/\!\?\:]'
      scope: keyword.control.hexa
    - match: '\.\.\.'
      scope: keyword.control.hexa

    - match: '\b(null|true|false|this)\b'
      scope: constant.other.hexa

    # Attributes
    - match: '@[a-zA-Z]\w*\b'
      scope: storage.attribute.hexa

    # Readability
    - match: '=>'
      scope: storage.attribute.hexa

    - match: '\.[a-z]\w*\b'
    #  scope: punctuation.accessor.dot.hexa
      scope: constant.other.placeholder.hexa
    #  scope: entity.name.function.hexa

    # Class names
    - match: '\b([A-Z][A-z0-9_]*)\b'
      scope: constant.other.hexa

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.hexa
    - match: '\b0x[0-9A-F]+\b'
      scope: constant.numeric.hexa

    # ERROR
    - match: \{
      push: braces
    - match: \}
      scope: invalid.illegal.stray-bracket-end

    # ERROR
    - match: \[
      push: brackets
    - match: \]
      scope: invalid.illegal.stray-bracket-end

    # ERROR
    - match: \(
      push: parenthesis
    - match: \)
      scope: invalid.illegal.stray-bracket-end

    # ERROR
    # // Nobody likes semicolons :)
    - match: ";"
      scope: invalid.illegal.stray-semi-colon

    # ERROR
    - match: \$
      scope: invalid.illegal.stray-semi-colon
    # ERROR
    - match: \b___
      scope: invalid.illegal.stray-semi-colon

#### INCLUDES ####

  nestable_comment:
    - meta_scope: comment.block
    - match: /\*
      push: nestable_comment
    - match: \*/
      pop: true
      push: comment_markdown

  braces:
    - match: \}
      pop: true
    - include: main

  brackets:
    - match: \]
      pop: true
    - include: main

  parenthesis:
    - match: \)
      pop: true
    - include: main

  name_after_function:
    - match: \b([A-Za-z_][A-Za-z_0-9]*)\b
      scope: entity.name.type
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.hexa
    - include: interpolated_hexa
    - match: '\\.'
      scope: constant.character.escape.hexa
    - match: '"'
      scope: punctuation.definition.string.end.hexa
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.hexa
    - include: interpolated_hexa
    - match: '\\.'
      scope: constant.character.escape.hexa
    - match: "'"
      scope: punctuation.definition.string.end.hexa
      pop: true

  raw_quoted_string:
    - meta_scope: string.quoted.single.hexa
    - match: "``"
      scope: constant.character.escape.hexa
    - match: "`"
      scope: punctuation.definition.string.end.hexa
      pop: true

  from:
    - meta_scope: markup.italic.hexa
    - match: \'[\.a-zA-Z\/\-_0-9\'\"]*
      scope: invalid.illegal.stray-semi-colon
      pop: true
    - match: \"[\.a-zA-Z\/\-_0-9\'\"]*
      scope: invalid.illegal.stray-semi-colon
      pop: true
    - match: '[\.a-zA-Z\/\-_0-9]+'
      pop: true

#  import:
#    - meta_scope: markup.italic.hexa
##    - match: '[0-9]+ '
##      scope: constant.numeric.hexa
##    - match: 'in'
###      scope: constant.numeric.hexa
##      push: inn
#    #- include: path
#    #- include: inn
#    #- match: .
#    - match: 123
#    - include: path
#      pop: true
#
#  path:
#    - match: '[a]+'
#      scope: constant.language.other
#      pop: true
#
#  inn:
#    #- match: '\b(in)\b'
#    - match: '[a-z]+'
#      scope: constant.numeric.hexa
#    - meta_scope: markup.bold.hexa
#      scope: constant.numeric.hexa
#      pop: true

  from_string_error:
    - meta_scope: markup.italic.hexa
    - match: '[\.a-zA-Z\/\-_0-9]+'
      pop: true

  #from_string_error:
  #  - meta_scope: markup.italic.hexa
  #  - match: '[\.a-zA-Z\/\-_0-9]+'
  #    pop: true
  #  - match: \[\"\.a-zA-Z\/\-_0-9]+
  #    scope: invalid.illegal.stray-semi-colon

  line_comment:
    - meta_scope: comment.line.hexa
    - include: comment_markdown
    - match: $
      pop: true

  comment_inline_code:
    - meta_scope: string.quoted.single.hexa
    - match: "`"
      scope: punctuation.definition.string.end.hexa
      pop: true

  comment_multiline_code:
    - meta_scope: string.quoted.single.hexa
    - match: "```"
      scope: punctuation.definition.string.end.hexa
      pop: true

  comment_markdown_eol:
    - match: $
      pop: true

  comment_markdown:
    # Close on */
    - match: \*/
      pop: true

    - match: /```$/
      scope: punctuation.definition.string.begin.hexa
      push: comment_multiline_code

    # Links
    - match: "http(s)?:\/\/[a-zA-Z./[0-9]-?&✓%=+#@]+"
      scope: constant.language.other

    # TODOs
    - match: \bTODO\b
      scope: invalid.illegal.stray-semi-colon

    - match: "`"
      push:
      - include: comment_markdown_eol
      - meta_scope: string.quoted.single.hexa
      - match: "`"
        pop: true

    - match: \*\*
      push:
      - meta_scope: markup.bold.hexa
      - match: $
        pop: true
      - match: \*\*
        pop: true

    - match: \*
      push:
      - match: $
        pop: true
      - meta_scope: markup.italic.hexa
      - match: \*
        pop: true

  interpolated_parens:
    - match: '\('
      push: interpolated_parens
    - match: '\)'
      pop: true

  interpolated_hexa:
    - match: '\\\('
      scope: punctuation.section.embedded.hexa
      push:
        - meta_scope: comment.line.hexa
        - match: '\('
          push: interpolated_parens
        - match: '\)'
          pop: true

